import Foundation
import Combine
import HealthKit

/// –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: –ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î + HealthKit
final class DetailsViewModel: ObservableObject {

    // MARK: ‚Äì Published –¥–ª—è View
    @Published var trainings     : [TrainingRow]     = []
    @Published var heartRates    : [HeartRateLogRow] = []
    @Published var glucose       : [GlucoseRow]      = []
    @Published var hrDailyPoints : [HRPoint]         = []

    // MARK: ‚Äì Providers
    private let local = LocalDBProvider()              // SQLite
    private let hk    = HealthKitWorkoutProvider()     // HealthKit

    private var bag = Set<AnyCancellable>()
    
    @Published var userAge : Int?               // ‚Üê –Ω–æ–≤–æ–µ
    @Published var userSex : HKBiologicalSex?   // ‚Üê –Ω–æ–≤–æ–µ

    private let auth = HealthKitAuthorizationManager()

    // MARK: ‚Äì Public¬†API
    @MainActor
    func load(for day: Date) async {

        let from = day.startOfDay
        let to   = day.endOfDay

        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 1. –ª–æ–∫–∞–ª—å–Ω–∞—è –ë–î ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        let locT  = local.trainings(from: from, to: to)
        let locHR = local.heartRates(for: locT)
        let locG  = local.glucose (from: from, to: to)

        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 2. HealthKit ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        let bundles   = (try? await hk.bundles(in: from ... to)) ?? []
        let hkRaw     = (try? await hk.dailyHeartRates(in: from ... to)) ?? []

        // —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å—É—Ç–æ—á–Ω—ã–µ HR‚Äë—Å—ç–º–ø–ª—ã
        let adapter       = HRFlatAdapter()
        let hkClean       = adapter.convert(hkRaw)
        print("üìà HR daily: raw=\(hkRaw.count)   clean=\(hkClean.count)")

        // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º bundles (—Å¬†–¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä–æ–º –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)
        let converted = Self.convert(bundles: bundles, adapter: adapter)

        let points = Self.points(from: hkClean,
                                 workouts: converted.trainings)

        // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3. publish ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        trainings     = locT  + converted.trainings
        heartRates    = locHR + converted.heartRates
        glucose       = locG
        hrDailyPoints = points
        
        if userAge == nil {
            await withCheckedContinuation { cont in
                auth.fetchAge { age in
                    self.userAge = age
                    self.auth.fetchBiologicalSex { sex in
                        self.userSex = sex
                        cont.resume()
                    }
                }
            }
        }
    }
}

// MARK: ‚Äì Helpers
private extension DetailsViewModel {

    /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º HKWorkoutBundle‚Äë—ã –≤ –æ–±—ã—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ + —Ñ–∏–ª—å—Ç—Ä—É–µ–º HR –≤–Ω—É—Ç—Ä–∏
    static func convert(bundles: [HKWorkoutBundle],
                        adapter: HRFlatAdapter)
      -> (trainings: [TrainingRow], heartRates: [HeartRateLogRow])
    {
        var tRows: [TrainingRow]     = []
        var hrRows: [HeartRateLogRow] = []

        for bundle in bundles {

            // ‚îÄ‚îÄ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
            let wk = bundle.workout
            tRows.append(
                TrainingRow(
                    id:        Int64(wk.uuid.hashValue),   // –≤—Ä–µ–º–µ–Ω–Ω—ã–π
                    type:      wk.workoutActivityType.workoutName,
                    startTime: wk.startDate.timeIntervalSince1970,
                    endTime:   wk.endDate.timeIntervalSince1970
                )
            )

            // ‚îÄ‚îÄ HR‚Äë—Å—ç–º–ø–ª—ã —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ + —Ñ–∏–ª—å—Ç—Ä‚Ç¨
            let raw   = bundle.heartRates               // ‚Üê –≤–æ—Ç –æ—Ç–∫—É–¥–∞ –±–µ—Ä—ë–º ¬´—Å—ã—Ä—ã–µ¬ª
            let clean = adapter.convert(raw)

            print("üèÉ‚Äç‚ôÇÔ∏è \(wk.workoutActivityType.workoutName): "
                  + "HR raw=\(raw.count)  clean=\(clean.count)")

            for s in clean {
                hrRows.append(
                    HeartRateLogRow(
                        id: Int64(s.uuid.hashValue),
                        trainingID: 0,
                        heartRate: Int(
                            s.quantity.doubleValue(
                                for: .count().unitDivided(by: .minute())) ),
                        timestamp: s.startDate.timeIntervalSince1970,
                        isSynced: true
                    )
                )
            }
        }
        return (tRows, hrRows)
    }

    /// –°—Ç—Ä–æ–∏–º —Ç–æ—á–∫–∏ –¥–ª—è ¬´—Ñ–æ–Ω–æ–≤—ã—Ö¬ª HR‚Äë—Å—ç–º–ø–ª–æ–≤
    static func points(from samples: [HKQuantitySample],
                       workouts: [TrainingRow]) -> [HRPoint]
    {
        let intervals = workouts.map {
            Date(timeIntervalSince1970: $0.startTime)
            ...
            Date(timeIntervalSince1970: $0.endTime)
        }

        return samples.map { s in
            let bpm = Int(
                s.quantity.doubleValue(
                    for: .count().unitDivided(by: .minute())) )
            let inside = intervals.contains { $0.contains(s.startDate) }
            return HRPoint(time: s.startDate, bpm: bpm, inWorkout: inside)
        }
    }
}
