import SwiftUI

struct TrainingsScreen: View {
    @StateObject private var vm = DetailsViewModel()
    @State private var statusMessage = ""

    var body: some View {
        VStack(spacing: 16) {
            Text("üèãÔ∏è Trainings")
                .font(.title)
                .padding(.top)

            Button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏") {
                Task {
                    do {
                        let added = try await vm.analyzeAndSaveAll()
                        statusMessage = added > 0
                          ? "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ \(added) –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π"
                          : "‚ÑπÔ∏è –ù–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"
                    } catch {
                        statusMessage = "‚ùå –û—à–∏–±–∫–∞: \(error.localizedDescription)"
                    }
                }
            }
            .buttonStyle(.borderedProminent)
            .padding(.horizontal)

            Text(statusMessage)
                .foregroundColor(.secondary)
                .padding(.top)

            Spacer()
        }
    }

    @MainActor
    private func analyzeAll() async {
        do {
            // ViewModel –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è –≤—ã–∑–æ–≤–µ—Ç SessionAnalyzer + SessionZonesDBManager
            let newCount = try await vm.analyzeAndSaveAll()
            statusMessage = "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ \(newCount) –Ω–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π"
        } catch {
            statusMessage = "‚ùå –û—à–∏–±–∫–∞: \(error.localizedDescription)"
        }
    }
}

struct TrainingsScreen_Previews: PreviewProvider {
    static var previews: some View {
        TrainingsScreen()
    }
}


#Preview {
    TrainingsScreen()
}
