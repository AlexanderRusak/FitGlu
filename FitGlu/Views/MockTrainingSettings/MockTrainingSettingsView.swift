import SwiftUI

struct MockTrainingSettingsView: View {
    @State private var trainingType: TrainingType = .fatBurning
    @State private var startTime: Date = Date()
    @State private var endTime: Date = Date().addingTimeInterval(3600)
    @State private var heartRateMin: Int = 60
    @State private var heartRateMax: Int = 180
    @State private var updateInterval: Double = 60 // –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    // –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    @State private var trainingIDToDelete: Int64 = 0
    
    // –î–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø—É–ª—å—Å–∞
    @State private var manualTrainingID: Int64 = 0
    @State private var manualHeartRate: Int = 0
    @State private var manualHeartRateTime: Date = Date() // –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –ø—É–ª—å—Å–∞


    var body: some View {
        NavigationView {
            Form {
                Section(header: Text("–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")) {
                    Picker("–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", selection: $trainingType) {
                        ForEach(TrainingType.allCases) { type in
                            Text(type.rawValue).tag(type)
                        }
                    }
                    .pickerStyle(MenuPickerStyle())
                }
                
                Section(header: Text("–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")) {
                    VStack(alignment: .leading) {
                        Text("–ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
                        DatePickerWithSeconds(date: $startTime)
                    }
                    VStack(alignment: .leading) {
                        Text("–ö–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
                        DatePickerWithSeconds(date: $endTime)
                    }
                }
                
                Section(header: Text("–ü—É–ª—å—Å")) {
                    HStack {
                        Text("–û—Ç:")
                        TextField("–ú–∏–Ω. –ø—É–ª—å—Å", value: $heartRateMin, formatter: NumberFormatter())
                            .keyboardType(.numberPad)
                    }
                    HStack {
                        Text("–î–æ:")
                        TextField("–ú–∞–∫—Å. –ø—É–ª—å—Å", value: $heartRateMax, formatter: NumberFormatter())
                            .keyboardType(.numberPad)
                    }
                }
                
                Section(header: Text("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)")) {
                    Slider(value: $updateInterval, in: 10...300, step: 5)
                    Text("–ò–Ω—Ç–µ—Ä–≤–∞–ª: \(Int(updateInterval)) —Å–µ–∫")
                }
                
                Section {
                    Button("–ù–∞—á–∞—Ç—å –º–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É") {
                        startMockTraining()
                    }
                }
                
                Section(header: Text("–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")) {
                    HStack {
                        Text("Training ID:")
                        TextField("–í–≤–µ–¥–∏—Ç–µ ID", value: $trainingIDToDelete, formatter: NumberFormatter())
                            .keyboardType(.numberPad)
                    }
                    Button("–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É") {
                        HeartRateLogDBManager.shared.deleteHeartRates(for: trainingIDToDelete)
                        TrainingLogDBManager.shared.deleteTraining(trainingIDToDelete)
                    }
                }
                
                Section(header: Text("–î–æ–±–∞–≤–∏—Ç—å –ø—É–ª—å—Å –≤—Ä—É—á–Ω—É—é")) {
                    HStack {
                        Text("Training ID:")
                        TextField("–í–≤–µ–¥–∏—Ç–µ ID", value: $manualTrainingID, formatter: NumberFormatter())
                            .keyboardType(.numberPad)
                    }
                    HStack {
                        Text("–ü—É–ª—å—Å:")
                        TextField("–í–≤–µ–¥–∏—Ç–µ –ø—É–ª—å—Å", value: $manualHeartRate, formatter: NumberFormatter())
                            .keyboardType(.numberPad)
                    }
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π DatePickerWithSeconds –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
                    DatePickerWithSeconds(date: $manualHeartRateTime)
                    
                    Button("–î–æ–±–∞–≤–∏—Ç—å –ø—É–ª—å—Å") {
                        let timestamp = manualHeartRateTime.timeIntervalSince1970
                        HeartRateLogDBManager.shared.insertHeartRate(
                            trainingID: manualTrainingID,
                            hrValue: manualHeartRate,
                            timestamp: timestamp
                        )
                        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É–ª—å—Å \(manualHeartRate) –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ \(manualTrainingID) –≤ \(manualHeartRateTime)")
                    }
                }
            }
            .navigationTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
        }
    }
    
    private func startMockTraining() {
        let newTraining = TrainingRow(
            id: 0,
            type: trainingType.rawValue,
            startTime: startTime.timeIntervalSince1970,
            endTime: endTime.timeIntervalSince1970
        )
        
        TrainingLogDBManager.shared.insertTraining(training: newTraining) { success, insertedTraining in
            guard success, let trainingInserted = insertedTraining else {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
                return
            }
            print("‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ —Å ID: \(trainingInserted.id)")
            
            var currentTime = startTime
            while currentTime <= endTime {
                let heartRateValue = Int.random(in: heartRateMin...heartRateMax)
                let heartRateRecord = HeartRateLogRow(
                    id: 0,
                    trainingID: trainingInserted.id,
                    heartRate: heartRateValue,
                    timestamp: currentTime.timeIntervalSince1970,
                    isSynced: false
                )
                
                HeartRateLogDBManager.shared.insertHeartRate(
                    trainingID: heartRateRecord.trainingID,
                    hrValue: heartRateRecord.heartRate,
                    timestamp: heartRateRecord.timestamp
                )
                print("ü´Ä –í—Å—Ç–∞–≤–ª–µ–Ω –ø—É–ª—å—Å \(heartRateValue) –Ω–∞ \(currentTime)")
                currentTime = currentTime.addingTimeInterval(updateInterval)
            }
            
            print("‚úÖ –ú–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î")
        }
    }
}

struct MockTrainingSettingsView_Previews: PreviewProvider {
    static var previews: some View {
        MockTrainingSettingsView()
    }
}
