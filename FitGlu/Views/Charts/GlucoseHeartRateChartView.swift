import SwiftUI
import HealthKit
import Charts

struct GlucoseHeartRateChartView: View {

    // MARK: - Constants (–ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–∑ Utils/Constants, —á—Ç–æ–±—ã –Ω–µ ¬´–∑–∞—Å–æ—Ä—è—Ç—å¬ª View)
    private let cfg = ChartConfig.default

    // MARK: - In-data
    let glucose      : [GlucoseRow]
        let heartRateRaw : [HeartRateLogRow]   // –æ—Å—Ç–∞—ë—Ç—Å—è ‚Äî –Ω—É–∂–µ–Ω –¥–ª—è yMax
        let hrSegments   : [[HRPoint]]         // ‚Üê –Ω–∞—à–∏ –∫—É—Å–∫–∏ –±–µ–∑ –¥—ã—Ä
        let trainings    : [TrainingRow]
        let dayDomain    : ClosedRange<Date>
        let userAge      : Int?
        let userSex      : HKBiologicalSex?
    
    // MARK: - Local state (–º–∏–Ω–∏–º—É–º: —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–¥–µ—Å—å)
    @State private var scale:  CGFloat = 1
    @State private var offset: TimeInterval = 0
    @State private var showHRLine = false

    // MARK: - Calculated
    private var yMax: Double {
        max(glucose.map(\.glucoseValue).max() ?? 10,
            Double(heartRateRaw.map(\.heartRate).max() ?? 120)) * 1.2
    }
    private var domain: ClosedRange<Date> {
        let half   = dayDomain.seconds / (2 * Double(scale))
        let center = dayDomain.lowerBound + dayDomain.seconds/2 + offset
        return (center - half) ... (center + half)
    }

    var body: some View {
        VStack(spacing: 6) {

            Text("Left Axis: Glucose (mg/dL) ¬∑ Heart Rate (bpm)")
                .font(.subheadline).foregroundColor(.gray)

            Chart {
                // 0) –ø—É–ª—å—Å–æ–≤—ã–µ –∑–æ–Ω—ã (–∏—Ö –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ª–µ–≤–æ–π –æ—Å–∏ ‚Äì –æ–Ω–∏
                //    –ø—Ä–æ—Å—Ç–æ —Ñ–æ–Ω, –ø–æ—ç—Ç–æ–º—É .yAxis(.left) –Ω–µ –Ω—É–∂–µ–Ω)
                if let age = userAge {
                    ChartHRZones(zones: HRZoneProvider.ranges(for: age, sex: userSex),
                                 xDomain: domain)
                }

                // 1) —Ñ–æ–Ω (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)
                TrainingBackground(trainings: trainings, yMax: yMax)

                // 2) –≥–ª—é–∫–æ–∑–∞
                GlucoseSeries(data: glucose)

                // 3) –ø—É–ª—å—Å
                HeartRateSeries(segments: hrSegments,
                                        asLine: showHRLine,
                                        useRightY: showHRLine)
            }
            .chartYAxis {
                // ‚îÄ‚îÄ‚îÄ –ª–µ–≤–∞—è (–≥–ª—é–∫–æ–∑–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                AxisMarks(position: .leading, values: .automatic) { value in
                    AxisGridLine()
                    AxisTick()

                    if let d = value.as(Double.self) {
                        AxisValueLabel {                // üëà label lives inside
                            Text("\(Int(d))")           // mg/dL
                        }
                    }
                }

                // ‚îÄ‚îÄ‚îÄ –ø—Ä–∞–≤–∞—è (–ø—É–ª—å—Å) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
                AxisMarks(position: .trailing, values: .automatic) { value in
                    AxisGridLine(stroke: StrokeStyle(lineWidth: 0.4, dash: [4, 4]))
                        .foregroundStyle(.blue.opacity(0.25))
                    AxisTick()

                    if let d = value.as(Double.self) {
                        AxisValueLabel {
                            Text("\(Int(d))")           // bpm
                        }
                    }
                }
            }
            .chartXScale(domain: domain)
            .chartYScale(domain: 0...yMax)
            .chartOverlay { proxy in
                ChartGestures(proxy: proxy,
                              dayDomain: dayDomain,
                              scale: $scale,
                              offset: $offset)
            }
            .frame(maxWidth: .infinity)
            .border(.gray.opacity(0.3))


            ChartLegend(trainings: trainings,
                        showHRLine: $showHRLine)
                .padding(.horizontal)
        }
        .padding(.horizontal)
    }
}
