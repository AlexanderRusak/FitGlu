import HealthKit

class GlucoseDataManager {
    static let shared = GlucoseDataManager()
    private let healthStore = HKHealthStore()
    private var observerQuery: HKObserverQuery?

    private let glucoseType = HKObjectType.quantityType(forIdentifier: .bloodGlucose)!

    // –ó–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    func requestAuthorization(completion: @escaping (Bool) -> Void) {
        guard HKHealthStore.isHealthDataAvailable() else {
            completion(false)
            return
        }
        healthStore.requestAuthorization(toShare: [], read: [glucoseType]) { success, error in
            if success {
                print("‚úÖ iPhone: –ì–ª—é–∫–æ–∑–∞ - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.")
            } else {
                print("‚ùå iPhone: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–ª—é–∫–æ–∑–µ: \(error?.localizedDescription ?? "")")
            }
            completion(success)
        }
    }

    // –ü–æ–¥–ø–∏—Å–∫–∞ (ObserverQuery)
    func subscribeGlucose() {
        guard observerQuery == nil else {
            print("‚ÑπÔ∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥–ª—é–∫–æ–∑—É.")
            return
        }
        
        let query = HKObserverQuery(sampleType: glucoseType, predicate: nil) {
            [weak self] _, completionHandler, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ ObserverQuery: \(error)")
                completionHandler()
                return
            }
            print("üîÑ iPhone: –ü–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–ª—é–∫–æ–∑—ã.")
            self?.fetchLatestGlucose()
            completionHandler()
        }
        
        healthStore.execute(query)
        observerQuery = query
        print("‚úÖ iPhone: –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≥–ª—é–∫–æ–∑—É.")
        
        // üîÅ –í–∞–∂–Ω–æ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏!
        healthStore.enableBackgroundDelivery(for: glucoseType, frequency: .immediate) { success, error in
            if success {
                print("‚úÖ Background delivery enabled for glucose")
            } else {
                print("‚ùå Failed to enable background delivery: \(error?.localizedDescription ?? "")")
            }
        }
    }

    // –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    func fetchLatestGlucose() {
        let start = Date(timeIntervalSinceNow: -24 * 3600)
        let pred = HKQuery.predicateForSamples(withStart: start, end: nil, options: .strictStartDate)

        let q = HKSampleQuery(sampleType: glucoseType, predicate: pred, limit: HKObjectQueryNoLimit, sortDescriptors: nil) {
            _, samples, error in
            guard let samples = samples as? [HKQuantitySample], error == nil else {
                print("‚ùå –û—à–∏–±–∫–∞ fetchLatestGlucose: \(error?.localizedDescription ?? "")")
                return
            }
            let mgdlUnit = HKUnit(from: "mg/dL")
            for s in samples {
                let val = s.quantity.doubleValue(for: mgdlUnit)
                let ts = s.startDate.timeIntervalSince1970
                GlucoseLogDBManager.shared.insertGlucose(timestamp: ts, value: val)
            }
            print("üíâ iPhone: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ \(samples.count) —Ç–æ—á–µ–∫ –≥–ª—é–∫–æ–∑—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î.")
        }
        healthStore.execute(q)
    }
}
