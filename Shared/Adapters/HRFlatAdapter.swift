import Foundation
import HealthKit

/// ¬´–°—ã—Ä—ã–µ¬ª –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î / HealthKit
typealias HRRaw = HeartRateLogRow     // ‚Üê –≤–∞—à–∞ –º–æ–¥–µ–ª—å

struct HRChunk {
    var rows: [HeartRateLogRow]
}

// MARK: ‚Äì¬†Flat‚ÄëRun¬†Adapter—õ
final class HRFlatAdapter {
    
    private let maxGap: TimeInterval

    init(maxGap: TimeInterval = 5 * 60) {      // ‚Üê –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        self.maxGap = maxGap
    }

    /// –£–¥–∞–ª—è–µ—Ç –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã HR‚Äë–∑–Ω–∞—á–µ–Ω–∏–π
    func convert(_ raw: [HeartRateLogRow]) -> [HeartRateLogRow] {

        print("üíì¬†HR¬†(raw)‚ÄØ=", raw.count)              // ‚Üê –±—ã–ª–æ

        guard !raw.isEmpty else { return [] }

        var cleaned: [HeartRateLogRow] = []
        var lastValue: Int?

        for sample in raw {
            let v = sample.heartRate
            guard v != lastValue else { continue }    // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª—å
            lastValue = v
            cleaned.append(sample)
        }

        print("üíì¬†HR¬†(clean)‚ÄØ=", cleaned.count)        // ‚Üê —Å—Ç–∞–ª–æ
        return cleaned
    }
    
    func chunks(from samples: [HKQuantitySample]) -> [[HKQuantitySample]] {

        // 1) –ø—Ä–µ–∂–Ω–µ–µ ¬´–æ—á–∏—â–µ–Ω–∏–µ¬ª (—É–¥–∞–ª—è–µ–º –ø–æ–¥—Ä—è–¥-–∏–¥—É—â–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ bpm)
        let cleaned = convert(samples).sorted { $0.startDate < $1.startDate }
        guard let first = cleaned.first else { return [] }

        // 2) —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–∑—Ä—ã–≤—É
        var segments: [[HKQuantitySample]] = [[first]]

        for s in cleaned.dropFirst() {
            guard let last = segments.last?.last else { continue }

            if s.startDate.timeIntervalSince(last.startDate) > maxGap {
                // –¥—ã—Ä–∫–∞ > maxGap ‚Üí –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç
                segments.append([s])
            } else {
                segments[segments.count - 1].append(s)
            }
        }
        return segments
    }
}

extension HRFlatAdapter {

    /// –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ HKQuantitySample
    /// (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É flat‚Äërun –≤–Ω—É—Ç—Ä–∏)
    func convert(_ samples: [HKQuantitySample]) -> [HKQuantitySample] {
        guard samples.count > 1 else { return samples }

        var cleaned: [HKQuantitySample] = []
        var lastBPM: Int?

        for s in samples {
            let bpm = Int(s.quantity.doubleValue(
                for: .count().unitDivided(by: .minute())) )
            guard bpm != lastBPM else { continue }
            lastBPM = bpm
            cleaned.append(s)
        }
        return cleaned
    }
}

